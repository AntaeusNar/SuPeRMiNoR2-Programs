local component = require("component")

if autopid ~= true then
  print("This is a special pid file, it needs to be run from autopid.")
end
assert(autopid)

function log(message)
  print("["..id.."] "..message)
end

--extra property for direct turbine access
turbine = component.proxy(address)
turbine.setActive(true)

sensor = turbine.getRotorSpeed
target = 1800

--extra property for emergency shutdown
maxSafeRPM = 2000
restartRPM = 1700
overspeedClamp = 25

status = {}
status.eshutdown = false

function shutdown()
  turbine.setActive(false)
  turbine.setFluidFlowRateMax(0)
  turbine.setInductorEngaged(true)
end

actuator = {
  set = function(value)
    local isActive = turbine.getActive()
    local rotorSpeed = turbine.getRotorSpeed()
    local energyStored = turbine.getEnergyStored()

    status.active = isActive
    status.rotorSpeed = rotorSpeed
    
    if rotorSpeed > maxSafeRPM and isActive == true then
      status.eshutdown = true
      turbine.setActive(false)
      value = 0
    end

    if rotorSpeed < restartRPM and isActive == false then
      status.eshutdown = false
      turbine.setActive(true)
    end

    local finishedStartup = rotorSpeed > target - 100
    status.finishedStartup = finishedStartup

    if energyStored < 900000 and finishedStartup == true then
      turbine.setInductorEngaged(true)
      status.inductor = true
      status.inductor_msg = "Buffer Low"
    else
      turbine.setInductorEngaged(false)
    end

    if energyStored > 900000 then
      status.inductor_msg = "Buffer Full"
    end

    if finishedStartup == false then
      status.inductor_msg = "Waiting for rotors to reach target"
    end

    --This will waste some power, but should help prevent the turbines
    --being stuck at higher speeds then intended. It should only ever be 
    --activated if the energy buffer is full and the turbine has no load to slow
    --it down
    if turbine.getRotorSpeed() > target + overspeedClamp then
      turbine.setInductorEngaged(true)
      status.inductor_msg = "Trying to slow down"
    end
    
    turbine.setFluidFlowRateMax(value)
    status.flowRateMax = value
    status.inputTank = turbine.getInputAmount()
    status.energyProduced = turbine.getEnergyProducedLastTick()
    status.flowRate = turbine.getFluidFlowRate()
    status.inductor = turbine.getInductorEngaged()

    if status.flowRate + 10 > status.flowRateMax then --the +10 is to avoid jitter
      status.enoughSteam = true
    end

    if status.flowRate + 10 < status.flowRateMax then
      status.enoughSteam = false
    end
    
  end,

  get = turbine.getFluidFlowRateMax,
  min = 0,
  max = turbine.getFluidFlowRateMaxMax,

}

factors = {
  p = 10,
  i = 0.4,
  d = 1,
}

frequency = 4